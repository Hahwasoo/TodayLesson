<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.todaylesson.Mapper.Senior_HS_Salescalculate_Mapper">
    <parameterMap type="java.util.HashMap" id="hashmap"></parameterMap>
    <!-- 쿼리문이랑 같은 이름설정--> 
	<resultMap type="com.todaylesson.DTO.SQLjoin_Member_Senior_Lesson_OrderList_OrderDetail_CalculateDTO" id="salesCalculateMap">
	   <!-- MemberDTO -->
	   <result property="member_id" column="member_id"/>
	   <result property="member_no" column="member_no"/>
	   <result property="member_name" column="member_name"/>
	   <result property="member_point" column="member_point"/>
	   <result property="member_level" column="member_level"/>
	   <result property="member_nick" column="member_nick"/>
	   <!-- MemberDTO -->
	   <!-- SeniorDTO -->
	   <result property="senior_no" column="senior_no"/>
	   <result property="senior_email" column="senior_email"/>
	   <result property="senior_phone" column="senior_phone"/>
	   <result property="senior_crno" column="senior_crno"/>
	   <result property="senior_nick" column="senior_nick"/>
	   <result property="senior_bank_name" column="senior_bank_name"/>
	   <result property="senior_account_name" column="senior_account_name"/>
	   <result property="senior_account_num" column="senior_account_num"/>
	   <result property="senior_register_date" column="senior_register_date"/>
	   <result property="senior_crno_name" column="senior_crno_name"/>
	   <!-- SeniorDTO -->
	   <!-- LessonDTO -->
	   <result property="lesson_no" column="lesson_no"/>
	   <result property="lesson_title" column="lesson_title"/>
	   <result property="lesson_cost" column="lesson_cost"/>
	   <result property="lesson_category" column="lesson_category"/>
	   <result property="lesson_register_date" column="lesson_register_date"/>
	   <result property="lesson_open_period" column="lesson_open_period"/>
	   <result property="lesson_close_period" column="lesson_close_period"/>
	   <result property="lesson_number" column="lesson_number"/>
	   <result property="lesson_type" column="lesson_type"/>
	   <result property="lesson_result" column="lesson_result"/>
	   <!-- LessonDTO --> 
	   <!-- OrderListDTO -->
	   <result property="orderlist_no" column="lesson_type"/>
	   <result property="product_no" column="product_no"/> 
	   <result property="orderlist_date" column="orderlist_date"/> 
	   <result property="orderlist_orderstatus" column="orderlist_orderstatus"/> 
	   <result property="orderlist_paystatus" column="orderlist_paystatus"/> 
	   <result property="orderlist_cost" column="orderlist_cost"/> 
	   <result property="orderlist_calculatestatus" column="orderlist_calculatestatus"/> 
	   <result property="orderlist_usepoint" column="orderlist_usepoint"/>
	   <!-- OrderListDTO -->
	   <!-- OrderDetailDTO -->
	   <result property="order_detail_no" column="order_detail_no"/> 
	   <!-- OrderDetailDTO -->
	   <!-- CalculateDTO -->
	   <result property="calculate_no" column="calculate_no"/> 
	   <result property="calculate_date" column="calculate_date"/> 
	   <result property="calculate_bank_name" column="calculate_bank_name"/>
	   <result property="calculate_account_name" column="calculate_account_name"/>
	   <result property="calculate_account_num" column="calculate_account_num"/>
	   <result property="calculate_crno" column="calculate_crno"/>
	   <result property="calculate_crno_name" column="calculate_crno_name"/>
	   <result property="calculate_name" column="calculate_name"/>
	   <result property="calculate_phone" column="calculate_phone"/>
	   <!-- CalculateDTO --> 
	   <!-- 정산신청 정산수수료,세금계산서부가세 DTO에만 추가 -->
	   <result property="orderdate_count" column="orderdate_count"/>
	   <result property="calculate_cost_nosurtax" column="calculate_cost_nosurtax"/>
	   <result property="calculate_cost_surtax" column="calculate_cost_surtax"/>
	   <result property="calculate_comm" column="calculate_comm"/>
	   <result property="calculate_surtax" column="calculate_surtax"/>
	   <!-- 정산신청 정산수수료,세금계산서부가세 DTO에만 추가 -->
	</resultMap>  
	
	<!-- 매출현황 토탈카운트 -->
	<select id="seniorSales_TotalCount" resultType="int"  parameterMap="hashmap">
	    select count(*)
	    from orderlist o  
					join order_detail od on od.orderlist_no=o.orderlist_no
	                join member m on m.member_id=o.member_id
	                join senior sn on sn.member_id=m.member_id
	                join lesson l on l.lesson_no=od.lesson_no
                    where l.senior_no=#{senior_no}
	</select>
	
	<!-- 매출현황전체리스트 -->
	<select id="SalesList" resultMap="salesCalculateMap" parameterMap="hashmap">
	    select o.orderlist_no, o.orderlist_paystatus, l.lesson_type, l.lesson_no, l.lesson_title 
	          ,o.orderlist_date, m.member_name, l.lesson_cost, o.orderlist_usepoint, sn.senior_no, sn.senior_crno
	    from orderlist o join order_detail od on od.orderlist_no=o.orderlist_no
	                     join member m on m.member_id=o.member_id
	                     join senior sn on sn.member_id=m.member_id
	                     join lesson l on l.lesson_no=od.lesson_no
                         where l.senior_no=#{senior_no}
                         order by orderlist_date desc
                         limit   #{startRow}, 15
	   <include refid="search_select"></include>  
	</select>
	<!-- 검색기능 쿼리문 -->
    <sql id="search_select">
       <if test='searchtxt!=null and searchtxt!=""'>
          <choose>
             <when test='search.equals("all")'>
			    and 
				   lesson_title like CONCAT('%', #{searchtxt}, '%')
				or 
				   member_name like CONCAT('%', #{searchtxt}, '%')
			 </when>
             <when test='search.equals("lesson_title")'>
                and lesson_title like CONCAT('%', #{searchtxt}, '%')
             </when>
             <when test='search.equals("member_name")'>
                and member_name like CONCAT('%', #{searchtxt}, '%')
             </when>
          </choose>
       </if>
       <if test='start_date!="" and start_date!=null'>	
	      and orderlist_date<![CDATA[>=]]>#{start_date}
	   </if>
	   <if test='end_date!="" and end_date!=null'>	
	      and orderlist_date<![CDATA[<=]]>#{end_date}
	   </if>
    </sql> 

	<!-- 정산신청 리스트 정산번호 / 정산상태 / 정산신청일 / 정산기간 -->
	<select id="cal_RequestList" resultMap="salesCalculateMap" parameterType="int">
	   select c.calculate_no, o.orderlist_calculatestatus, c.calculate_date, l.lesson_open_period, l.lesson_close_period, 
	          o.orderlist_date, o.orderlist_orderstatus
	   from calculate c right join orderlist o on c.orderlist_no=o.orderlist_no
	                    join order_detail od on od.orderlist_no=o.orderlist_no
	                    join lesson l on l.lesson_no=od.lesson_no
	   where l.senior_no=#{senior_no}
	   group by o.orderlist_calculatestatus,o.orderlist_date
       order by orderlist_date desc
	</select>

    <!-- 정산계좌 사업자번호 -->	
	<!-- <select id="cal_SeniorAccount" resultType="com.todaylesson.DTO.SeniorDTO" parameterType="java.lang.String">
	   select senior_no, member_id, senior_email, senior_phone, senior_crno, senior_nick,
	          senior_bank_name, senior_account_name, senior_account_num, senior_register_date
	   from senior s1
	   where senior_no=(select senior_no
	                    from senior s2
	                    where s1.senior_no=s2.senior_no
	                    and member_id=#{member_id})
	  select senior_no, s1.member_id, senior_email, senior_phone, senior_crno, senior_nick,
	          senior_bank_name, senior_account_name, senior_account_num, senior_register_date
	  from senior s1 join member m on s1.member_id=m.member_id
	  where s1.member_id=#{member_id}                  
	                    
	</select> -->
	
	<!-- 정산신청 리스트 결제건수 -->
	<select id="calPayCount" resultMap="salesCalculateMap" parameterType="int">
	   select count(*) as orderdate_count
       from orderlist o join order_detail od on od.orderlist_no=o.orderlist_no
                        join lesson l on od.lesson_no=l.lesson_no
                        join senior s on l.senior_no=s.senior_no
                        join member m on m.member_id=o.member_id
	   where l.senior_no=#{senior_no}
	   group by o.orderlist_calculatestatus,o.orderlist_date
       order by orderlist_date desc
	</select>
	
	<!-- 정산신청 리스트 레스수익금액 -->
	<select id="calRevenueCost" resultMap="salesCalculateMap" parameterType="int">
	   select sum(orderlist_cost) as orderlist_cost 
       from orderlist o join order_detail od on od.orderlist_no=o.orderlist_no
                        join lesson l on od.lesson_no=l.lesson_no
                        join senior s on l.senior_no=s.senior_no
                        join member m on m.member_id=o.member_id
       where l.senior_no=#{senior_no}
       group by o.orderlist_calculatestatus,o.orderlist_date
       order by orderlist_date desc
	</select>
	
	<!-- 정산신청 리스트 포인트사용 -->
	<select id="calUsePointSum" resultMap="salesCalculateMap" parameterType="int">
	   select sum(orderlist_usepoint) as orderlist_usepoint
       from orderlist o join order_detail od on od.orderlist_no=o.orderlist_no
                        join lesson l on od.lesson_no=l.lesson_no
                        join senior s on l.senior_no=s.senior_no
                        join member m on m.member_id=o.member_id
       where l.senior_no=#{senior_no}
       group by o.orderlist_calculatestatus,o.orderlist_date
       order by orderlist_date desc
	</select>
	
	<!-- 정산신청 정산금액 정산수수료 세금계산서 및 부가세 -->
	<select id="cal_CommSurtax" resultMap="salesCalculateMap" parameterType="int">
	   select sum(orderlist_cost-(orderlist_usepoint+(orderlist_cost*0.1))) as calculate_cost_nosurtax
	        , sum(orderlist_cost-(orderlist_usepoint+(orderlist_cost*0.1)+((orderlist_cost/1.1)*0.1))) as calculate_cost_surtax
	        , sum(orderlist_cost*0.1) as calculate_comm
	        , sum((orderlist_cost/1.1)*0.1) as calculate_surtax
       from orderlist o join order_detail od on od.orderlist_no=o.orderlist_no
                        join lesson l on od.lesson_no=l.lesson_no
                        join senior s on l.senior_no=s.senior_no
                        join member m on m.member_id=o.member_id
       where l.senior_no=#{senior_no}
       group by o.orderlist_calculatestatus,o.orderlist_date
       order by orderlist_date desc
	</select>
	
	<!-- 정산신청 계좌정보 디테일(그외 디테일필요할수도있어서 시니어정보 다 가져옴 -->
	<select id="accountDetailDTO" resultType="com.todaylesson.DTO.SeniorDTO" parameterType="java.lang.String">
	   select senior_no, member_id, senior_email, senior_phone, senior_crno, senior_nick,
	          senior_bank_name, senior_account_name, senior_account_num, senior_register_date
	   from senior
	   where member_id=#{member_id}
	</select>
	
	<!-- 정산신청 계좌정보 수정 -->
	<update id="accountUpdateDTO" parameterType="com.todaylesson.DTO.SeniorDTO">
	   update senior
	   set
	   senior_bank_name=#{senior_bank_name}
	  ,senior_account_name=#{senior_account_name}
	  ,senior_account_num=#{senior_account_num}
	   where member_id=#{member_id}
	</update>
	
	<!-- 정산가능금액 -->
    <select id="calculate_PossibilityCost" resultType="int" parameterType="int">
       select floor(sum(orderlist_cost-(orderlist_usepoint+(orderlist_cost*0.1))))
       from orderlist o join order_detail od on od.orderlist_no=o.orderlist_no
                        join lesson l on od.lesson_no=l.lesson_no
                        join senior s on l.senior_no=s.senior_no
                        join member m on m.member_id=o.member_id
       where o.orderlist_calculatestatus=2 and l.senior_no=#{senior_no}
    </select>
    
    <!-- 정산대기금액 -->
    <select id="calculate_WaitingCost" resultType="int" parameterType="int">
       select floor(sum(orderlist_cost-(orderlist_usepoint+(orderlist_cost*0.1))))
       from orderlist o join order_detail od on od.orderlist_no=o.orderlist_no
                        join lesson l on od.lesson_no=l.lesson_no
                        join senior s on l.senior_no=s.senior_no
                        join member m on m.member_id=o.member_id
       where o.orderlist_calculatestatus=1 and l.senior_no=#{senior_no}
    </select>

    <!-- 정산내역 목록 리스트 정산번호 / 정산상태 / 정산신청일 / 정산기간 / 정산계좌  -->
    <select id="calStatementList" resultMap="salesCalculateMap" parameterType="java.lang.String">
       select c.calculate_no, o.orderlist_calculatestatus, c.calculate_date, l.lesson_open_period, l.lesson_close_period,
	          s.senior_bank_name, s.senior_account_num, s.senior_account_name
	   from calculate c join orderlist o on c.orderlist_no=o.orderlist_no
	                    join order_detail od on od.orderlist_no=o.orderlist_no
	                    join lesson l on l.lesson_no=od.lesson_no
                        join member m on m.member_id=o.member_id
                        join senior s on s.member_id=m.member_id
	   where m.member_id=#{member_id}
	   group by o.orderlist_date
       order by orderlist_date desc
   </select>
   
   	<!-- 정산내역 리스트 결제건수 -->
	<select id="calStatementPayCount" resultMap="salesCalculateMap" parameterType="java.lang.String">
	   select count(*)
       from orderlist o join order_detail od on od.orderlist_no=o.orderlist_no
                        join lesson l on od.lesson_no=l.lesson_no
                        join senior s on l.senior_no=s.senior_no
                        join member m on m.member_id=o.member_id
	   where m.member_id=#{member_id}
	   group by o.orderlist_date
       order by orderlist_date desc
	</select>
	
	<!-- 정산내역 리스트 레스수익금액 -->
	<select id="calStatementRevenueCost" resultMap="salesCalculateMap" parameterType="java.lang.String">
	   select sum(orderlist_cost) 
       from orderlist o join order_detail od on od.orderlist_no=o.orderlist_no
                        join lesson l on od.lesson_no=l.lesson_no
                        join senior s on l.senior_no=s.senior_no
                        join member m on m.member_id=o.member_id
       where m.member_id=#{member_id}
       group by o.orderlist_date
       order by orderlist_date desc
	</select>
	
	<!-- 정산내역 리스트 포인트사용 -->
	<select id="calStatementUsePointSum" resultMap="salesCalculateMap" parameterType="java.lang.String">
	   select sum(orderlist_usepoint) 
       from orderlist o join order_detail od on od.orderlist_no=o.orderlist_no
                        join lesson l on od.lesson_no=l.lesson_no
                        join senior s on l.senior_no=s.senior_no
                        join member m on m.member_id=o.member_id
       where m.member_id=#{member_id}
       group by o.orderlist_date
       order by orderlist_date desc
	</select>

</mapper>



