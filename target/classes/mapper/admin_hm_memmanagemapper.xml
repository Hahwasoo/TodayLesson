<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.todaylesson.Mapper.Admin_HM_MemmanageMapper">

<!-- 회원카운트 -->
<select id="getCount" resultType="int" parameterType="java.util.HashMap">
select COUNT(*)
from member
<include refid="search_select"></include>
</select>


<!-- 관리자 회원리스트 출력 -->
<select id="adminmemberlist" resultType="com.todaylesson.DTO.MemberDTO" parameterType="java.util.HashMap">
select member_no,member_id,member_name,member_birth,member_phone,member_addr,member_zipcode,member_point,member_level, member_email, member_nick, member_join_date
from member
<include refid="search_select"></include>
order by member_no
limit #{startrow}, 15
</select>


<!-- 기존 레벨을 리턴해주는 쿼리 -->
<select id="oldlevel" parameterType="String" resultType="com.todaylesson.DTO.MemberDTO">
select member_level
from member
where member_id = #{member_id}
</select>


<!-- 회원 레벨 변경&등급별 권한 변경 -->
<update id="adminlevelupdate" parameterType="HashMap">
update member
set member_level = #{member_level}
<choose>
<when test='#{member_level==0}'>
,enabled = '1'
</when>
<when test='#{member_level==1}'>
,enabled = '1' 
</when>
<when test='#{member_level==2}'>
,enabled = '1'
</when>
<when test="#{member_level==3}">
,enabled = '0'
</when>
</choose>
where member_id = #{member_id}
</update>


<!-- 시니어에서 주니어가 될 시 기존에 있던 시니어 테이블 삭제 -->
<delete id="adminlevelup" parameterType="HashMap"> 
delete 
from senior
where member_id = #{member_id}
</delete>

<!-- 시니어에서 주니어가 될 시 ROLE_USER 권한을 추가해준다 -->
<insert id="adminmemberauthupdate" parameterType="HashMap">
insert into member_auth(member_auth,member_id)
values('ROLE_USER',#{member_id})
</insert>

<!-- 시니어에서 주니어가 될 시 ROLE_SENIOR 권한을 삭제해준다 -->
<delete id="adminmemberauthdelete" parameterType="HashMap">
delete from member_auth
where member_auth = 'ROLE_SENIOR'
and member_id = #{member_id}
</delete>


<!-- 관리자에서 주니어가 될 시 ROLE_ADMIN 권한을 삭제해준다 -->
<delete id="deladminrole" parameterType="HashMap">
delete from member_auth
where member_auth = 'ROLE_ADMIN'
and member_id = #{member_id}
</delete>


<!-- 주니어에게 시니어 ROLE_SENIOR권한을 준다 -->
<insert id="leveluptojr" parameterType="HashMap">
insert into member_auth(member_auth,member_id)
values('ROLE_SENIOR',#{member_id})
</insert>

<!-- 주니어에서 시니어가 될 때 ROLE_USER 권한을 삭제한다 -->
<delete id="deljrauth" parameterType="HashMap">
delete from member_auth
where member_auth = 'ROLE_USER'
and member_id = #{member_id}
</delete>

<!-- 주니어에서 시니어가 될 때 시니어 테이블을 만들어준다 -->
<insert id="insertsenior" parameterType="String">
insert into senior(member_id,senior_register_date)
values(#{member_id},now())
</insert>


<!-- 블락됐던사람이 다시 레벨업될때 그전의 ROLE을 삭제해줌 -->
<delete id="delblockauth" parameterType="HashMap">
delete from member_auth
where member_auth = 'ROLE_ERROR'
and member_id = #{member_id}
</delete>

<!-- 관리자 ROLE_ADMIN추가 -->
<insert id="plusadmin" parameterType="HashMap">
insert into member_auth(member_auth,member_id)
values('ROLE_ADMIN',#{member_id})
</insert>

<!-- 블락시키기 -->
<insert id="insertblock" parameterType="HashMap">
insert into member_auth(member_auth,member_id)
values('ROLE_ERROR',#{member_id})
</insert>

<!-- 블락시킬 시 기존 권한 삭제 -->
<delete id="delnotblock" parameterType="HashMap">
delete from member_auth
where not member_auth = 'ROLE_ERROR' 
and member_id = #{member_id}
</delete>

<!-- 그전에 시니어거나 주니어였을때 ROLE삭제 -->
<delete id="delauth" parameterType="HashMap">
delete from member_auth
where member_auth = 'ROLE_USER'
or member_auth = 'ROLE_SENIOR'
and member_id = #{member_id}
</delete>


<sql id="search_select">
<if test='searchtxt!=null and searchtxt!=""'>
<choose>
<when test='search.equals("all")'>
where member_id like CONCAT('%',#{searchtxt},'%')
or
member_name like CONCAT('%',#{searchtxt},'%')
or
member_nick like CONCAT('%',#{searchtxt},'%')
</when>
<when test='search.equals("member_id")'>
where member_id like CONCAT('%',#{searchtxt},'%')
</when>
<when test='search.equals("member_name")'>
where member_name like CONCAT('%',#{searchtxt},'%')
</when>
<when test='search.equals("member_nick")'>
where member_nick like CONCAT('%',#{searchtxt},'%')
</when>
</choose>
</if>
</sql>

 
</mapper>